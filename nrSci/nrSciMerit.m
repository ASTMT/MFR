% File: <nrSciMerit.m>
%
% Syntax: nrSciMerit(varargin) or nrSciMerit('inputfile') or nrSciMerit
%
% Description:
%       This function generates figures of merit for assessing the static performance of the TMT telescope
%       structural designs.
%
%       To run this file from Ansys use the following command:
%       /SYS "matlab -nosplash -nojvm -r nrSciMerit('filename.txt')"
%
% Input Parameters:
%       Input arguments can either be entered on the command line or by
%       using an input file.  If using an input file, enter the arguments
%       in an ascii text file using spaces or line breaks to separate the
%       arguments.  In this case, nrSciMerit takes only one argument, the
%       name of the input text file.
%
%       If no input arguments are given, the routine will look for a file
%       called 'MatlabCmdLine.txt' and execute commands from there.
%
%       The following applies to both methods of entering command line
%       arguments.
%
%       The first 3 input parameters (YfileName,outFileRoot,MatFileName) must be
%       supplied. The remaining arguments are flags that determine the
%       behavior of the function.
%
%       YFileName   - [text string] Name of the file containing vector of 
%                       displacements, equivalent to the IM Y vector.  
%                       This file must have a .txt ending, but the name can
%                       be supplied without the extension.
%       outFileRoot - [text string], root name of files generated by the merit
%                       function. This is used to creat the ACT and RESULT
%                       files.  The file names are assembled from the root
%                       plus either 'ACT.txt' or 'RESULT.txt'
%       MatFileName - [Matlab .mat file]  MAT file containing the OC,CST,
%                       IM and SD data structures.  This file must have a
%                       .mat ending, but the name can be supplied without
%                       the extension.
%       flags       - [text string] 
%                           '-ExitMatlab' - exit Matlab after execution. This is
%                           used to exit Matlab after a call from Ansys.
%                           Default state is not to exit.
%                           '-DebugMode' - performs additional calculations
%                           and prints extra results to the screen.
%
%                           '-ActFit','<Id>' % Determine the method used to align the telescope
%                               <Id> can be:
%                                 LS   = Least squares calculation of transform T
%                                 LS+  = Minimum actuator stroke(DEFAULT)
%                                 Keck = Keck planar method
%                                 AvXY = Uses the average XY of the
%                                   segments then calculates minimum
%                                   actuator stroke using remaining DOFs
%                           '-NomAct','<BasisFullName>'
%                           uses an actuator position from another run as
%                           the basis for calculating the minimum stroke
%                           result for this load case. Requires the full
%                           gravity loading results from the basis
%                           case
%                           '-ElevAng', 'Angle', - specifies the elevation
%                           angle used for the FEA model in degrees, 0
%                           being zenith, and 90 horizon pointing.  If no
%                           -ElevAng flag is specified, the first integer
%                           found in the YFileName is assumed to be
%                           the elevation angle.  The elevation angle is
%                           required when the -NomAct function is used. 
%                              
%
% Required Global Data Structures:
%           IM
%           CST
%           OC
%           TS
%           RES
%           SEN
%           TMTCS
%
% Required Data Files:
%       

%
% Extended Documentation (Won't be shown in Matlab help command)
%

%
% Revision History
%
% $Id: nrSciMerit.m,v 1.9 2012/10/02 17:32:48 roberts Exp $
%
% INDENT-OFF*
% $Log: nrSciMerit.m,v $
% Revision 1.9  2012/10/02 17:32:48  roberts
% moved Imsource directory path addition earlier in file to fix error
%
% Revision 1.8  2012/08/02 17:38:38  roberts
% ElevAng calculated from YFileName rather than output name
%
% Revision 1.7  2012/07/24 20:08:35  roberts
% removed calls to reporting functions. Now nrSciMerit does not output results. s.
% Call vlSciWriteResults.m for reporting on RES data
%
% Revision 1.6  2011/03/08 22:23:13  roberts
% minor changes , fixed header
%
% INDENT-ON*


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%           Herzberg Institute of Astrophysics                  %%%%%
%%%%%%      Astronomy Technology Research Group - Victoria           %%%%%
%
% (c) <2010>				        (c) <2010>
% National Research Council		    Conseil national de recherches
% Ottawa, Canada, K1A 0R6 		    Ottawa, Canada, K1A 0R6
% All rights reserved			    Tous droits reserves
% 					
% NRC disclaims any warranties,	    Le CNRC denie toute garantie
% expressed, implied, or statu-	    enoncee, implicite ou legale,
% tory, of any kind with respect	de quelque nature que se soit,
% to the software, including		concernant le logiciel, y com-
% without limitation any war-		pris sans restriction toute
% ranty of merchantability or		garantie de valeur marchande
% fitness for a particular pur-	    ou de pertinence pour un usage
% pose.  NRC shall not be liable	particulier.  Le CNRC ne
% in any event for any damages,	    pourra en aucun cas etre tenu
% whether direct or indirect,		responsable de tout dommage,
% special or general, consequen-	direct ou indirect, particul-
% tial or incidental, arising		ier ou general, accessoire ou
% from the use of the software.	    fortuit, resultant de l'utili-
% 					                sation du logiciel.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function nrSciMerit(varargin)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Initialization 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% declare integrated model global variables
global IM
global CST
global OC
global TS
global RES
global MA       % used by other routines but loaded by this function
global NRCIM    % ditto
global SD       % ditto
global SEN
global TMTCS

% set timer
tic;

fprintf('\n\n\n');
fprintf('************************************************************************\n');
fprintf('******           Herzberg Institute of Astrophysics               ******\n');
fprintf('******      Astronomy Technology Research Group - Victoria        ******\n');
fprintf('******                         NRCIM                              ******\n');
fprintf('******        Telescope Structure Merit Function Tool             ******\n');
fprintf('******                                                            ******\n');
fprintf('************************************************************************\n');
fprintf('* (c) <2003-2012>				    (c) <2003-2012>                         *\n');
fprintf('* National Research Council         Conseil national de recherches     *\n');
fprintf('* Ottawa, Canada, K1A 0R6 		    Ottawa, Canada, K1A 0R6            *\n');
fprintf('* All rights reserved			    Tous droits reserves               *\n');
fprintf('************************************************************************\n\n');


fprintf('....Processing input, loading files and setting up\n');

% Add IMSource to the IM source file path
if isdir(fullfile('.','ImSource'))
    fprintf('\tFound IMSource sub-directory, adding to path...\n');
    addpath(fullfile(pwd,'ImSource'));
    if isdir(fullfile('.','ImSource','Data'))
        fprintf('\tFound ImSource\\Data sub-directory, adding to path...\n');
        addpath(fullfile(pwd,'ImSource','Data'));
    end
end

% if function arguments are from a file, read them in

if length(varargin) < 2
    if isempty(varargin)
    % read input values from MatlabCmdLine.txt file
        fid = fopen('MatlabCmdLine.txt');
        if fid == -1
            error('Unable to open the input file MatlabCmdLine.txt');
        end
    else
        % input values will be read from a file
        fid = fopen(varargin{1});
        if fid == -1
            error('Unable to open the input file %s',varargin{1});
        end
    end
    ii = 1;
    while 1 
        tmp = fscanf(fid,'%s',1);
        if isempty(tmp)
            fclose(fid);
            break;
        end
        input{ii} = tmp;
        ii = ii+1;
    end
 
elseif length(varargin) < 3
    error('nrSciMerit: Must either be 1 or at least 3 input arguments nrSciMerit(YFileName,outFileRoot,MatFileName)');
else
    input = varargin;
end

% assign filenames and add .txt extension if necessary
RES.YFileName = input{1};
if isempty(strfind(RES.YFileName,'.txt'))
    RES.YFileName = [RES.YFileName '.txt'];
end

RES.DIR = pwd;
RES.Time = datestr(now);
RES.Ver = version;

RES.outFileRoot = input{2};
RES.ElevAng = vlUtGetIntFromString(input{1});
RES.ActFileName = [RES.outFileRoot 'ACT.txt'];
RES.ResultFileName = [RES.outFileRoot 'RESULT.txt'];
RES.ReportFileName = [RES.outFileRoot 'REPORT.txt'];
RES.NomActPosFile = [];

RES.MatFileName = input{3};
if isempty(strfind(RES.MatFileName,'.mat'))
    RES.MatFileName = [RES.MatFileName '.mat'];
end

% load the MAT file
load(RES.MatFileName);

% Set flags to default values
RES.ExitMatlab = 0;
RES.DebugMode = 0;
RES.OutputSP = 0;
RES.SaveData = 1;
RES.ActFitMethods = cellstr([ 'LS  '; 'LS+ '; 'Keck']);
RES.ActFit = 'LS+';
RES.ActFitNdx = 2;
RES.NomAct = 0;

% identify the surfaces rather than using integer numbers
M2_surfnum = 2;
M3_surfnum = 3;
foc_surfnum = 4;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Set up General Run Related RES data
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% Loop through remaining arguments.  A while loop is used because the number
% of iterations will be one less than expected if -ActFit is set.  A for loop
% does not allow changing the number of iterations after the loop is started.

k=4;
while k <= length(input)
    switch input{k}
 
        case '-ElevAng'
            if k == length(input)
                error('The -ElevAng flag requires an angle argument ''-ElevAng'',''<Angle in degrees>'' '); 
            end
            
            if input{k+1}(1) == '-'
                error('The elevation angle argument between -ElevAng and %s is missing',...
                    input{k+1});
            end
            RES.ElevAng = str2num(input{k+1});
            if isempty(RES.ElevAng)
                error('-ElevAng argument %s is not a number',input{k+1});
            end
            
            % advance past the ElevAng argument
            k = k+1;
            
        case '-NomAct'
            if k == length(input)
                error('The -NomAct flag requires a file name argument ''-NomAct'',''<FileName>'' '); 
            end
            
            if input{k+1}(1) == '-'
                error('The file name between -NomAct and %s is missing',...
                    input{k+1});
            end
            
            RES.NomAct = 1;
            RES.NomActPosFile = input{k+1};
            RES.NomActPosFileMeta = dir(RES.NomActPosFile);
            tmp = load(RES.NomActPosFile);
% Code modified to use _Data.mat file with RES data structure rather than
% ActPosNom.mat file

            RES.ActPosNom = tmp.RES.ActPosNom;
%RES.ActPosNom = tmp.ActPosNom;
            
            % advance past the filename argument
            k = k+1;
        
        case '-ActFit'
          if k == length(input)
              error('The -ActFit flag requires a parameter value.'); 
          end
          if input{k+1}(1) == '-'
              error('The parameter value between -ActFit and %s is missing.',...
                     input{k+1}); 
          end

          if ismember(input{k+1}, RES.ActFitMethods)
              RES.ActFit = deblank(input{k+1});
              RES.ActFitNdx = 1;
              
              while RES.ActFitNdx <= numel(RES.ActFitMethods)
                  if strcmp(RES.ActFit, deblank(RES.ActFitMethods{RES.ActFitNdx}))
                %  if RES.ActFit == RES.ActFitMethods{RES.ActFitNdx}
                      break;
                  end;
                  RES.ActFitNdx = RES.ActFitNdx + 1;
              end
              if RES.ActFitNdx > numel(RES.ActFitMethods)
                  error('Internal error (valid RES.ActFit not found)');
              else
                  k = k + 1;
              end
          else
              error('Invalid -ActFit value (%s).  Allowable: %s,%s,%s,%s',...
                    input{k+1}, RES.ActFitMethods{1:numel(RES.ActFitMethods)});
              RES.ActFit = input{k+1};
          end


      case '-ExitMatlab'
          RES.ExitMatlab = 1;
      case '-DebugMode'
          RES.DebugMode = 1;

      case '-SaveData'
          RES.SaveData = 1;
      otherwise
        error(['nrSciMerit: Unknown input argument' input{k}]);
    end
    
    % Advance to next parameter
    k = k + 1;
end

%% Set the IM.MFVersion if necessary.

if ~isfield(IM,'MFVersion')

    % The version number field was incorporated into the merit function in
    % version 6.0.  For backwards compatibility this code generates a
    % version number from the input Mat file name. If the version number is
    % generated, then the field IM.GetDistancesFile will also be created
    % with the default pre-version 6.0 value.
    %
    % Assume that we can get the version number from the MatFileName
    % The standard format is '*RelXpY' where X is the major version number
    % and Y is the minor version number. If unable to parse the number from
    % here then exit with an error.
    
    fprintf('WARNING: IM.MFVersion was not found. %s\n', ...
            'This will be defined from the MatFileName input parameter');
    
    pos = findstr('Rel',MatFileName);
    if isempty(pos) || isempty(str2double(MatFileName(pos+3))) ...
        || MatFileName(pos+4) ~= 'p' || isempty(str2double(MatFileName(pos+5)))
            error('Cannot parse MFVersion from MatFileName');
    end
    IM.MFVersion = str2double(MatFileName(pos+3))+str2double(MatFileName(pos+5))/10;

    if IM.MFVersion >= 6.0
        msg = 'Parsed Version %.1f. IM.MFVersion must be defined if Version >= 6.0';
        error(msg, IM.MFVersion)
    end
  
    % if version number is not defined then GetDistancesFile probably isn't
    % either.  Define it as the pre-version 6.0 default.
    if ~isfield(IM,{'GetDistancesFile'})
        fprintf('WARNING: IM.GetDistancesFile was not found.  %s\n', ...
	        'This will be set to vlCsM1pGetDistances_3mirr');
        IM.GetDistancesFile = 'vlCsM1pGetDistances_3mirr';
    end
end

fprintf('MFVersion = %.1f\n',IM.MFVersion); 
% Write to the results file
RES.MFVersion = IM.MFVersion;

% End of setting up
fprintf('....done in %.1f Seconds\n\n',toc);

%% load the displacement vector, Y. The Y vector is in C (nodal) coordinates
% Order of this vector is SSOutput
Y = load(RES.YFileName);  % order of Y is in the SD.SSoutput order
RES.Y = Y;

%% calculate the sp vector and fill in the TS data structure

[sp TS] = nrCimCalcPerturbations(Y);

% vectorize sp
RES.UncorrectedSp = sp';
RES.UncorrectedSp = RES.UncorrectedSp(:);

% create sp for primary motions only by zeroing out sequential surfaces
RES.UncorrectedSpPrimary = sp;

% Now find the CST index for the sequential surfaces (M2=2 etc) and zero
% them out
RES.UncorrectedSpPrimary(logical(CST.SurfBool(:,M2_surfnum)),:) = [0 0 0 0 0 0];
RES.UncorrectedSpPrimary(logical(CST.SurfBool(:,M3_surfnum)),:) = [0 0 0 0 0 0];
RES.UncorrectedSpPrimary(logical(CST.SurfBool(:,foc_surfnum)),:) = [0 0 0 0 0 0];

% vectorize
RES.UncorrectedSpPrimary = RES.UncorrectedSpPrimary';
RES.UncorrectedSpPrimary = RES.UncorrectedSpPrimary(:);

% Save the TS structure for future processing the Secondary Mirror Position
RES.TSFULL = TS;


%% Align the primary and secondary mirrors
nrSciAlignTelescope;

% Calculate the merit function results
nrSciCalcResults;

% Plot and save OPD's - nrSciPlotOPD is now called by vlSciWriteResults
% nrSciPlotOPD;

% Assign all output variables to the workspace so that they are available
% after the run
ws = 'base';
assignin(ws,'RES',RES);

% We're done!
RES.ExecTime = toc;
%fprintf('....done in %.1f Seconds\n\n',RES.ExecTime);

% Save all data structures for debugging and future verification
if RES.SaveData
    save(strcat(RES.outFileRoot,'_Data'),'RES');
end

%% Save actuator position file  
% This code commented out - can use _Data.mat file for '-NomAct' flag
%ActPosNom = RES.ActPosNom;
%save([RES.outFileRoot 'ActPosNom.mat'],'ActPosNom');

%% output results - vlSciWriteResults is now called separately from nrSciMerit
% vlSciWriteResults(RES); 

% Check for ExitMatlab flag and exit if true
if RES.ExitMatlab 
    exit;
else
    return;
end

% End of nrSciMerit
